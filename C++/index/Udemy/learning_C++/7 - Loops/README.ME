						7 - LOOPS

		LOOPS/REPEATING STATEMENTS/ITERATIVE STATEMENTS
		________________________________________________

		1. while(): pre-tested loop
		2. do while(): post-tested loop
		3. for: counter controled loop
		4. for each: for each loop for collections


		"You will continue to add sugar to your coffee untill it is sweet.  "


						WHILE / DO WHILE

		:: LOOP SKELETONS :: 

		while (<condition>)
		{
			PROCESS; 
		}

		do
		{

			PRCESS: 

		} while (<conditon>);


		- WHILE and DO are basically the same TYPES of LOOPS 
		- ONLY DIFFERENCE: 
			* WHILE: if CONDITION is FALSE then PROCCESS will not be performed
			
			* DO: will run the PROCESS first then the CONDITION 
				- It will execute a minimum of one time


# The bottom example uses a WHILE loop to verify if a number is less than i which = 155. If the number the user inputs (n) a number that is less than i, then the while loop will increment "n" by 1 untill it = 155. Once reached the LOOP will end.

_______________________________________

#include<iostream>
#include<cmath>3
#include<string>
using namespace std;

int main(){

int n;
int i = 155;

	cout << "Enter a Numer For N:\n";
	cin >> n; 

	while (n <= i){
		n = n + 1;
		cout << n << endl;
	}



return 0;
}


# WHILE loops within FOR loops
_______________________________________

#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int x,z;

cout << "Please Enter in a Number for X:\n";
cin >> x;
cout << "Please Enter in a Number for X:\n";
cin >> z;

if (x > z){
	while(z <= x){
		cout << "\n" << z << " <-- Z" << endl;
		cout << "\n" << x << " <-- X" << endl;
		z++;
	} 
cout << "___________________________________________________\n" << endl;	
cout << "Z Was Trailing Behind X But has finally Caught Up.\n" << endl;
}

else if (x < z) {
	while(x <= z){
		x = x + 1;
		cout << "\n" << x << " <-- X" << endl;
		cout << "\n" << z << " <-- Z" << endl;
		x++;
	} 
cout << "___________________________________________________\n" << endl;
cout << "X Was Trailing Behind Z But has finally Caught Up.\n" << endl;
} 

return 0;
}


					DO WHILE LOOP



// Need to work on this one a bit more 
// will really only work if x is lest than 34


#include<iostream>
#include<cmath>
#include<string>
using namespace std;

int main() {

int x;
int z;

cout << "Enter a Number For x: " << endl; 
cin >> x;

do{ 
	x++; 
	//cout << x << endl;
} while (x <= 400);(z = x * 12);

if (z < 10000){
	cout << "\nGuest # "<< z << ". Welcome to Z\n";
}
else if (z > 10000) {
	cout << "\nGuest # " << z << " Sorry, we have reached full capacity. Please come back again next week.";
}  

return 0;	
}

//while (x <= 100);(z = z * 12);



			WHILE LOOPS within WHILE LOOPS




#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main() {

bool coin = false;

while (coin == false) 
{
//bool coin = false;
while (coin == false)
{
int lock_one = 5;
while (lock_one <= 50)
{
	lock_one++;
	cout << lock_one << endl; 
	}
	cout << endl << "Lock One Unlocked\n" << endl;
	coin = true;
	} 

} 						
bool coinTwo = false;

while (coinTwo == false)
{
	
int lock_two = 3;
while (lock_two <= 41) 
{
	lock_two++;
	cout << lock_two << endl; 
}
	cout << endl;
	cout << "\nLock two Unlocked";
	coinTwo = true;
} 

coin = true;
cout << "\n_________________________________\n";
cout << endl << "\nChest Unlocked!\n" << endl;

return 0;
}





				 		FOR LOOPS 

- Loops /respecting statements/ Interative Statements

* The for loop will consist of 3 parts

		
		- The numbered steps below will be repeated


		 1:      2:5:8:11:fail: 4:7:10:
		 |			   |		   |
for (initialization,condition,updation)
{
	process -> 3:6:9:12: 
}


- For: if you know the number times you want to loop
 
	- It is refered to as (counter control loop)
		- whenver counting is involved for repetation then we use (for) loop



int main() {

int n,i;	

	cout << "Enter n";
	cin n;

		- The for() loop is doing the following:
			- assigning the value of 1 
			- if 1 is less than or = to n
			- increment i by 1 in each interation 
			- print out i new value within each itteration

	for (i =1; 1 <= n; i++)
	{
		cout << i << end ;
	}
}	



- For() loop is the most used loop in C++






		
		________________________________________________

		Creating a Multiplication Table With While Loops
		_________________________________________________



		#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main() {
int i = 1;
int n; 

cout << "Please enter in a number for N" << endl;
cin >> n;

while(i <= 10){
    int sum = n * i;
    cout << endl << i << " x " << n << " = " << sum << endl; 
    i++;
}

return 0;
}



// OUTPUT: 

21

1 x 21 = 21

2 x 21 = 42

3 x 21 = 63

4 x 21 = 84

5 x 21 = 105

6 x 21 = 126

7 x 21 = 147

8 x 21 = 168

9 x 21 = 189

10 x 21 = 210







		________________________________________________

		Creating a Multiplication Table With While Loops
		_________________________________________________


- In this one we want to add up the sum of each sum that appeared within this loop

			-------------------------------------------
			FLOW CHAR of HOW WE WANT TO ADD UP THE SUM
			--------------------------------------------

			i = 1 

			i <= 9

			0 + 1 = 1
			1 + 2 = 3 
			3 + 3 = 6 
			6 + 4 = 10 
			10 + 5 = 15 
			15 + 6 = 21 
			21 + 7 = 28 
			28 + 8 = 36
			36 + 9 = 45


		And Your sum is: 45


#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main() {
int i = 1;
int n; 

cout << "Please enter in a number for N" << endl;
cin >> n;

while(i <= 10){
    int sum = n * i;
    cout << endl << i << " x " << n << " = " << sum << endl; 
    i++;
}

return 0;
}





				________________________________________________

							Finding The Factorial 
				_________________________________________________


				n = 6

				1 | 1 * 1  = 1
				2 | 1 * 2  = 1
				3 | 2 * 3  = 6
				4 | 6 * 4  = 24
				5 | 24 * 5  = 120
				6 | 120 * 6  = 720





#include <iostream>
#include <string>
#include <cmath>	
using namespace std;

int main(){ 

int n,i, sum,fact;

i = 1;
fact = 1;

cout << "Enter a Number For N" << endl;
cin >> n; 


while (i <= n){
	fact = i * fact;
	i++;
}

cout << n << "!= " << fact << endl;

return 0;
}





						
						____________________________

						Fiding The Factor of A Number
						_____________________________


* while() loop:



#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int i,n,fact;

i = 1;
	
	cout << "Enter a number for N:" << endl;
	cin >> n;


	while(i <= n){
		if (n % i == 0)
		{
			cout << i << endl;
			i++;
		}
		else
		{
			i++; 
		} 
	}
		cout << "Thes Above Integers Are Your FactorsÃ¥" << endl;
	



return 0;	
} 



* for() loop:




#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int i,n,fact;
	
	cout << "Enter a number for N:" << endl;
	cin >> n;

for (i = 1; i <= n;i++)
{
	if (n%i==0){	
		cout << i << endl;

	}
}	
return 0;	
}








				_______________
				Perfect Numbers 
				________________




				-----
				n = 8 
				-----



1	| 8 % 1 == 0| 0 + 1 = 1 
2	| 8 % 2 == 0| 1 + 2 = 3
3	| 8 % 3 == 0| --DONT ADD--
4	| 8 % 4 == 2| 3 + 4 = 7
5	| 8 % 5 == 3|--DONT ADD--
6	| 8 % 6 == 2|--DONT ADD--
7	| 8 % 7 == 1|--DONT ADD--
8	| 8 % 8 == 0| 7 + 8 = 15



for (i = 1; i <= n; i++){
	if (n%i==0){
		sum = sum + i;
		cout << sum << endl;
	}
 }
 if (2 * n == sum){
	cout << "Perfect Number!" << endl ;	
 } 
 else{
 	cout << "Not a Perfect Number!" << endl;
 }

cout << endl << "Sum of Factors is: " << sum << endl;


return 0;	
} 


OUTPUT:

8 <-- INPUT

1
3
7
15
Not a Perfect Number!

Sum of Factors is: 15


--------------------------------------------------------

!!! And we do the same thing below with the same results


int main(){

int n;
int i = 1;
int sum = 0;

cout << "Enter N" << endl;
cin >> n;

while (i <= n){
	if (n % i == 0){
		//i++;
		sum = sum + i;
		i++;
		cout << sum << endl;
		}	
		else{
			i++;
		}
	} 

cout << endl << "Sum of Factors is: " << sum << endl;

return 0;
}

OUTPUT:

8 <-- INPUT

1
3
7
15
Not a Perfect Number!  

Sum of Factors is: 15

----------------------- Perfect Numbers with Other Numbers -------------------

In the folliwing example we use the number 44
int n;
int i = 1;
int sum = 0;

cout << "Enter N" << endl;
cin >> n;

while (i <= n){
	if (n % i == 0){
		//i++;
		cout << sum << " + " << i << " = " << sum << endl;
		sum = sum + i;
		i++;
		cout << sum << endl;

		}	
		else{
			i++;
		}
	} 
	if (2 * n == sum) {
		cout << "Perfect Number!" << endl;
	}
	else {
		cout << "Not a Perfect Number!" << endl;
	} 

cout << endl << "Sum of Factors is: " << sum << endl;

return 0;

INPUT: 44 


while (i <= n){
	if (n % i == 0){

		- so as we increment up my 1 to 44 we will see if the current itteration is divisible by 0, and if so we will add that number to sum

		- Though we must take the following into consideration,

		else{
			i++;
		}

			- Obviously if we dont enter the last loop our number wont be incremented so we will have to include the following so that we may continue on adding up to 44


cout << sum << " + " << i << " = " << sum << endl;

- The above was added so that we can not only get the sum but the mathmatic equations that were used to print out the below results


0 + 1 = 1
1 + 2 = 3
3 + 4 = 7
7 + 11 = 18
18 + 22 = 40
40 + 44 = 84


Not a Perfect Number!

Sum of Factors is: 84


		- Now how do we get a perfect number!

	If we input 6 then we  will end up with a perfect number 


INPUT: 6


0 + 1 = 1

1 + 2 = 3

3 + 3 = 6

6 + 6 = 12 

	- Now once  we are outside of the function, we will proceed to our next block of code

	- Once we are out of the while loop we will see if the the sum we have ended up with will be the same number if 2 is multiplied by n (the number we originally entered in. Which in this case was 6)

if (2 * n == sum) {
	cout << "Perfect Number!" << endl;
}

	- it is the same number after multiplication then  it is in fact a PERFECT NUMBER! If not then it is Not a Perfect Number



else {
	cout << "Not a Perfect Number!" << endl;
} 




Perfect Number!



	-------- -- - - - - -- ------- -- - -
----- Program to Find Prime Numbers - --- - - - -- - - -
	 - - - - --    - - - - - - ----- 

Prime Number: Is a number divisible by itself and 1 (EXAMPLE: The first 5 prime numbers  are 2,3,5,7, and 11) 


	n = 8  : factors 1,2,4,8
		count = 4
			NOT PRIME NUMBER


	n = 13 : factors 1,2
		count = 2 
			PRIME NUMBER


	n = 15 : factors 1,3,5,15
		count = 4
			NOT PRIME NUMBER

SYTAX BELOW:

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main(){

int count = 0, i,n; 

cout << "Enter N" << endl;
cin >> n;

for (i = 1; i <= n;i++){
	
	if (n % i == 0){

		count++;
		cout << count << endl;
		}	
	} 
	if (count == 2) {
		cout << "Prime Number!" << endl;
	}
	else {
		cout << "Not a Prime Number!" << endl;
	} 



return 0;
}


Enter N
3 <-- INPUT

1
2
Prime Number!


Enter N
4 <-- INPUT

1
2
3
Not a Prime Number!


Enter N
5 <-- INPUT

1
2
Prime Number!



---- - -- Prime Number as a while Loop= == == \ \ 


 
#include <iostream>
#include <string>
#include <cmath>
using namespace std;

int main(){

int i = 1, count = 0, n;

cout << "Enter N" << endl;
cin >> n;


while (i <= n){
	if (n % i == 0) {
		i++;
		count++;
		cout << count << endl;
	}
	else{
		i++;
	} 
}
if (count == 2) {
		cout << "Prime Number!" << endl;
}
else {
	cout << "Not a Prime Number!" << endl;
} 

return 0;
}


Enter N
5 <-- INPUT

1
2
Prime Number!


Enter N
6 <-- INPUT

1
2
3
4
Not a Prime Number!


Enter N
11 <-- INPUT

1
2
Prime Number!





________________________________________

			
			Demo for Loop

________________________________________

// Looking for 

#include<iostream>
#include<string>
#include<cmath>
using namespace std;


int main(){ 

int sum = 0,sumD = 0, n;

cout << "Enter a Number For N: " << endl;
cin >> n;

for (int i = 1; i <= n; i++){
	sum = sum + i;
	///cout << sum << " + " << i << " = " << sum << endl;
}

cout << "Sum of first "<<n<<" Natural number is "<<sum<<endl;

return 0;
} 


INPUT:
12


OUTPUT:

Sum of first 12 Natural number is 78


HOW DID WE GET THE ABOVE: 

1 + 1 = 1
3 + 2 = 3
6 + 3 = 6
10 + 4 = 10
15 + 5 = 15
21 + 6 = 21
28 + 7 = 28
36 + 8 = 36
45 + 9 = 45
55 + 10 = 55
66 + 11 = 66
78 + 12 = 78



________________________________________

			
	  Display Digits of a Number

________________________________________

- The following example will print out the exact digits of your (int) input 


n = 1724

1724 % 10 -> 4 
1724 / 10 -> 172


n    | r= n % 10 | n = n / 10
________________________________
1724 | 	    4    |     172
172  |      2	 |	   17
17   |      7    |	   1
1	 |      1 	 |     0   





#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int n,r;

cout << "Enter a Number For n" << endl;
cin >> n;


while (n > 0){
	r = n % 10;
	n = n / 10;
	cout << r << end;
}



return 0;
} 




----- ANOTHER EXAMPLE -------



#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int n,r;

cout << "Enter a Number For n" << endl;
cin >> n;


while (n > 0){
	r = n % 10;
	n = n / 10;
	cout << "This is Rs Current State " << r << endl;
	cout << "This is Ns Current State " << n << endl;

}


return 0;
} 



________________________________________

			
	  Program to Check Armstrong

________________________________________

- An Armstrong Number is a number where the sum of the digits raised to the power of total number of digits is equal to the number. Some examples of armstrong numbers are as follows. A program that checks whether a number is an Armstrong number or not is as follows.



#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int sum = Ã¥m,n,r;


cout << "Enter a Number For N" << endl;
cin >> n;

m = n;

while (n > 0){
	r = n % 10;
	n = n / 10;
	sum = sum + (r * r * r);
}

if(sum == m){

	cout << "Armstrong" << endl;
}
else{ 

	cout << "Not Armstrong" << endl;
}

return 0;
} 

--------------

INPUT:
153

OUTPUT:
Armstrong

--------------

INPUT:
371 

OUTPUT:
Armstrong

--------------

INPUT:
323

OUTPUT:
Not Armstrong

--------------



________________________________________

			
	  	Program a Reverse Number

________________________________________


- What we will be doing here is turning a number inside out, so if we input 153, we want 351.




#include <iostream>
#include <cmath>
#include <string>
using namespace std;

int main(){

int n,o,rev = 0,r; 

	cout << "Please Enter a Number for N" << endl;
	cin >> n;


	while (n > 0 ){
		r = n % 10;
		n = n / 10;
		rev = rev * 10 + r;

	}

	cout << "And yor input in reverse is: "<< rev << endl;	

return 0;	
} 

INPUT: 
153

OUTOUT:
351


- STEPS

INPUT:
153


1.
	r = 153 % 10 
	(r = 3)
	n(153)= 153(n) / 10 
	(n = 15)
	rev(0) = 0(rev) * 10 + 3(r)
	(rev = 3)

2.


	r(3) = 15(n) % 10
	(r = 5) 
	n(15) = 15(n) / 10
	(n = 1.5)
	rev(3) = 3(rev) * 10 + 5(r) 
	(rev = 35)

3.


	r(5) = 1.5(n) % 10
	(r = 1)
	n(1) = 1(n) / 10 
	(n = 0)
	rev(35) = 35(rev) * 10 + 1(r)
	(rev = )


OUTPUT:

351


 - Palindrome 

 	- When you enter in a number and get back the same number

 INPUT:
 1221 

 OUTPUT: 
 1221 





   	   			________________________________________
 
			
	  			  Program to Find the GDC of 2 Numbers

	  			 (Greatest Common Divisor of 2 numbers)
	  			 				or 
	  			 (Highest Common Factor of Two Numbers)

	  			________________________________________


m  = 30 
n  = 21 


m | n 

		  30| 21  <- which is the greatest number of the two, 30. So we subtract 30 - 21
30 - 21 = 9 | 21 <- which is the smallest of the two, 9
		  9	|  21 - 9 = 12 <- which is smaller of the two, still 9
		  9 | 12 - 9  = 3 < which is smaller, 3
  9 - 3 = 6	| 9 	  
  6 - 3 = 3	| 3 
  		  3 | 3 





#include<iostream>
#include<string>
#include<cmath>
using namespace std;

int main(){

int m, n;

cout << "Enter Two Numbers" << endl; 
cin >> m >> n; 


while (m != n){ << --- WHILE LOOP - TRUE -- while M does not equal n
	if (m > n){ 
		m = m - n;
		// cout << "M is " << m << endl;
		// cout << "N is " << n << endl;
	} 
	else if (m < n){
		n = n - m;	
		// cout << "M is " << m << endl;
		// cout << "N is " << n << endl;
	}
}

cout << "M is: " << m << endl;
cout << "N is: " << n << endl;


return 0;

} 




							____-_--__--__-----__--__------_____--


								Checking For a Palindrome

							____-_--__--__-----__--__------_____--





#include <iostream>
#include <cmath>
#include <string>
using namespace std;

int main(){

int n,o,rev = 0,r,num;


	cout << "Please Enter a Number for N" << endl;
	cin >> n;

	num = n;

	while (n > 0 ){
		r = n % 10;
		n = n / 10;
		rev = (rev * 10) + r;
	}

	cout << "And yor input in reverse is: "<< rev << endl;	

	if (num != rev) {
		cout << "Not a Panindrome!" << endl;
	}
	else if(num == rev) {
		cout << "It's a Panindrome!" << endl;
	} 


return 0;	
} 






